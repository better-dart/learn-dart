version: "3"

################################################################################################
#
# local dev:
#   - run:
#   - clean:
#
################################################################################################

#
# sub namespace: https://taskfile.dev/#/usage?id=including-other-taskfiles
#
includes:
  app:
    taskfile: ./packages/ffi-app/Taskfile.yml
    dir: ./packages/ffi-app/
    optional: true

  zig:
    taskfile: ./packages/ffi-core-zig/Taskfile.yml
    dir: ./packages/ffi-core-zig/
    optional: true

#
# global vars: https://taskfile.dev/#/usage?id=variables
#
vars:
  VAR1: "some-var"

# global env:
env:
  ENV1: testing

# env file:
dotenv:
  - .env

################################################################################################

# task groups:
tasks:
  default:
    cmds:
      - task: init
      - task: run

  install:
    cmds:
      - brew tap leoafarias/fvm # flutter version management
      - brew install fvm
      #      - fvm install 2.2.3 # install flutter sdk
      - fvm use 2.5.0 # install and use
      - pub global activate fvm # update fvm

  tool:
    cmds:
      - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # install rust
      - cargo install svgcleaner # fix svg file meta error

  init:
    cmds:
      - cp .env.local .env
      - task: app:init

  new:app:
    cmds:
      - task: new

  new:
    desc: "create flutter app"
    cmds:
      - echo "$(pwd) | ${FLUTTER_APP_ROOT} , ${FLUTTER_APP_NAME}, ${FLUTTER_APP_ORG}"
      - |
        cd ${FLUTTER_APP_ROOT};
        fvm flutter create ${FLUTTER_APP_NAME} \
          --project-name=${FLUTTER_PROJECT_NAME} \
          --org=${FLUTTER_APP_ORG}

  new:lib:
    desc: "create flutter lib"
    cmds:
      - echo "$(pwd) | ${FLUTTER_APP_ROOT} , ${FLUTTER_APP_NAME}, ${FLUTTER_APP_ORG}"
      - |
        cd ${FLUTTER_APP_ROOT};
        fvm flutter create ${FLUTTER_APP_NAME} \
          --project-name=${FLUTTER_PROJECT_NAME} \
          --org=${FLUTTER_APP_ORG} \
          --template=package

  new:zig:lib:
    cmds:
      - mkdir ${NEW_PACKAGE_NAME}; cd ${NEW_PACKAGE_NAME}; zig init-lib
    dir: packages/

  run:
    cmds:
      - task: app:run

  #########################################################################

  stash:
    cmds:
      - git stash

  quick:
    cmds:
      - task: commit
      - task: pull
      - task: push

  commit:
    cmds:
      - git add lib/
      - git commit -m "update"

  push:
    cmds:
      - git push origin main --tags
      - repo_url=`git remote -v | grep push | awk -F ":" '{print $2}' | awk -F ".git" '{print "https://github.com/"$1}'`; open $repo_url

  pull:
    cmds:
      - git config pull.rebase false
      - git pull
